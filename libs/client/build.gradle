apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
//apply from: 'maven-push.gradle'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-rc1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group properties.getProperty("bintray.groupId")
version properties.getProperty("bintray.version")

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName version
        multiDexEnabled true

        ndk {
            moduleName = "libpjsua2"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage', 'HardcodedText'
        textReport true
        textOutput "stdout"
    }
    testOptions {
//        unitTests.returnDefaultValues = true
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', '../common/src/main/java']
            proto {
                srcDir '../common/proto'
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.3.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.4.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }

    generatedFilesBaseDir = "$projectDir/build/generated/proto"
}

dependencies {

    // annotations
    implementation 'javax.annotation:javax.annotation-api:1.2'
    // compile 'com.android.support:support-annotations:25.3.1'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    // permissions
    implementation 'com.karumi:dexter:4.1.0'

    // grpc
    implementation 'io.grpc:grpc-stub:1.5.0'
    implementation 'io.grpc:grpc-okhttp:1.5.0'
    implementation 'io.grpc:grpc-protobuf-lite:1.5.0'

    implementation 'com.birbit:android-priority-jobqueue:2.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}


bintray {
    dryRun = false
    publish = true
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.key")

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = properties.getProperty("bintray.repo")
        name = properties.getProperty("bintray.package")
        userOrg = properties.getProperty("bintray.organization")
        vcsUrl = properties.getProperty("bintray.vcsUrl")
        licenses = ['Apache-2.0']
        labels = ['android', 'africastalking', 'sms', 'voice', 'ussd', 'airtime', 'payment']
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'AT SDK'
                url properties.getProperty("bintray.vcsUrl")
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'aksalj'
                        name 'Salama AB'
                        email 'aksalj@aksalj.com'
                    }
                    developer {
                        id 'jaykayitare'
                        name 'Jay Kayitare'
                        email 'jaykayitare@gmail.com'
                    }
                }
                scm {
                    connection properties.getProperty("bintray.vcsUrl")
                    developerConnection properties.getProperty("bintray.vcsUrl")
                    url properties.getProperty("bintray.vcsUrl")
                }
            }
        }
    }
}

repositories {
    google()
}